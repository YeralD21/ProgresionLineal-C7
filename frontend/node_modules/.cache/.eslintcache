[{"C:\\Users\\YERALD\\Documents\\C7-Analisis Multivariado\\Examen - Sesion 2\\ProgresionLineal-C7\\frontend\\src\\index.js":"1","C:\\Users\\YERALD\\Documents\\C7-Analisis Multivariado\\Examen - Sesion 2\\ProgresionLineal-C7\\frontend\\src\\App.js":"2"},{"size":207,"mtime":1748118770154,"results":"3","hashOfConfig":"4"},{"size":20376,"mtime":1748122270725,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"ir1y07",{"filePath":"9","messages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\YERALD\\Documents\\C7-Analisis Multivariado\\Examen - Sesion 2\\ProgresionLineal-C7\\frontend\\src\\index.js",[],["12","13"],"C:\\Users\\YERALD\\Documents\\C7-Analisis Multivariado\\Examen - Sesion 2\\ProgresionLineal-C7\\frontend\\src\\App.js",["14","15"],"import React, { useState } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Grid,\r\n  Box,\r\n  Tabs,\r\n  Tab\r\n} from '@material-ui/core';\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  // Estados principales\r\n  const [paso, setPaso] = useState(0); // 0: Configuración, 1: Detalles, 2: Resultados\r\n  const [objetivo, setObjetivo] = useState('max');\r\n  const [variables, setVariables] = useState([{ nombre: 'X0', valor: '' }, { nombre: 'X1', valor: '' }]);\r\n  const [restricciones, setRestricciones] = useState([]);\r\n  const [nuevaRestriccion, setNuevaRestriccion] = useState({ x: '', y: '', operador: '<=', valor: '' });\r\n  const [coeficientes, setCoeficientes] = useState({ x: '', y: '', metodo: 'grafico' });\r\n  const [resultado, setResultado] = useState(null);\r\n\r\n  // Navegación entre pasos\r\n  const siguiente = () => setPaso((prev) => Math.min(prev + 1, 2));\r\n  const volver = () => setPaso((prev) => Math.max(prev - 1, 0));\r\n\r\n  // Agregar restricción\r\n  const agregarRestriccion = () => {\r\n    setRestricciones([...restricciones, nuevaRestriccion]);\r\n    setNuevaRestriccion({ x: '', y: '', operador: '<=', valor: '' });\r\n  };\r\n\r\n  // Resolver el modelo\r\n  const resolverProblema = async () => {\r\n    try {\r\n      const datos = {\r\n        objetivo,\r\n        coeficientes: variables.map((_, idx) => parseFloat(coeficientes[`x${idx}`] || 0)),\r\n        restricciones: restricciones.map(r => [\r\n          ...variables.map((_, idx) => parseFloat(r[`x${idx}`] || 0)),\r\n          r.operador,\r\n          parseFloat(r.valor)\r\n        ])\r\n      };\r\n      const respuesta = await axios.post('http://localhost:5000/resolver', datos);\r\n      setResultado(respuesta.data);\r\n      siguiente();\r\n    } catch (error) {\r\n      alert('Error al resolver el problema');\r\n    }\r\n  };\r\n\r\n  // Tabs para navegación visual\r\n  const tabs = [\r\n    \"Configuración del Modelo\",\r\n    \"Detalles del Modelo\",\r\n    \"Presentación de los Resultados\"\r\n  ];\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" style={{ marginTop: '2rem' }}>\r\n      <Paper style={{ padding: '2rem' }}>\r\n        <Tabs value={paso} indicatorColor=\"primary\" textColor=\"primary\" centered>\r\n          {tabs.map((label, idx) => (\r\n            <Tab key={idx} label={label} />\r\n          ))}\r\n        </Tabs>\r\n\r\n        {/* Paso 1: Configuración */}\r\n        {paso === 0 && (\r\n          <Box mt={4}>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n              Comenzamos configurando nuestro modelo\r\n            </Typography>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} md={6}>\r\n                <Paper style={{ padding: '1rem', textAlign: 'center' }}>\r\n                  <Typography>Método a utilizar</Typography>\r\n                  <Button\r\n                    variant={coeficientes.metodo === 'grafico' ? \"contained\" : \"outlined\"}\r\n                    color=\"primary\"\r\n                    onClick={() => setCoeficientes(c => ({ ...c, metodo: 'grafico' }))}\r\n                    style={{ marginRight: 8 }}\r\n                  >\r\n                    Gráfico\r\n                  </Button>\r\n                  <Button\r\n                    variant={coeficientes.metodo === 'simplex' ? \"contained\" : \"outlined\"}\r\n                    color=\"primary\"\r\n                    onClick={() => setCoeficientes(c => ({ ...c, metodo: 'simplex' }))}\r\n                  >\r\n                    Simplex\r\n                  </Button>\r\n                </Paper>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <Paper style={{ padding: '1rem', textAlign: 'center' }}>\r\n                  <Typography>Tipo de optimización</Typography>\r\n                  <Button\r\n                    variant={objetivo === 'max' ? \"contained\" : \"outlined\"}\r\n                    color=\"primary\"\r\n                    onClick={() => setObjetivo('max')}\r\n                    style={{ marginRight: 8 }}\r\n                  >\r\n                    Maximizar\r\n                  </Button>\r\n                  <Button\r\n                    variant={objetivo === 'min' ? \"contained\" : \"outlined\"}\r\n                    color=\"primary\"\r\n                    onClick={() => setObjetivo('min')}\r\n                  >\r\n                    Minimizar\r\n                  </Button>\r\n                </Paper>\r\n              </Grid>\r\n            </Grid>\r\n            <Box mt={4}>\r\n              <Typography variant=\"h6\">Variables</Typography>\r\n              <Grid container spacing={2}>\r\n                {variables.map((v, idx) => (\r\n                  <React.Fragment key={idx}>\r\n                    <Grid item xs={2}>\r\n                      <TextField\r\n                        label={`X${idx}`}\r\n                        value={v.nombre}\r\n                        disabled\r\n                        fullWidth\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={8}>\r\n                      <TextField\r\n                        label=\"Descripción\"\r\n                        value={v.descripcion || ''}\r\n                        onChange={e => {\r\n                          const newVars = [...variables];\r\n                          newVars[idx].descripcion = e.target.value;\r\n                          setVariables(newVars);\r\n                        }}\r\n                        fullWidth\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => setVariables(variables.filter((_, i) => i !== idx))}\r\n                        disabled={variables.length <= 1}\r\n                      >\r\n                        🗑️\r\n                      </Button>\r\n                    </Grid>\r\n                  </React.Fragment>\r\n                ))}\r\n                <Grid item xs={12}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => setVariables([...variables, { nombre: `X${variables.length}`, descripcion: '' }])}\r\n                  >\r\n                    + Añadir variable\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n            <Box mt={4}>\r\n              <Typography variant=\"h6\">Restricciones</Typography>\r\n              <Grid container spacing={2}>\r\n                {restricciones.map((r, idx) => (\r\n                  <React.Fragment key={idx}>\r\n                    <Grid item xs={2}>\r\n                      <TextField\r\n                        label={`R${idx}`}\r\n                        value={r.nombre || `R${idx}`}\r\n                        disabled\r\n                        fullWidth\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <TextField\r\n                        label=\"Descripción\"\r\n                        value={r.descripcion || ''}\r\n                        onChange={e => {\r\n                          const newRes = [...restricciones];\r\n                          newRes[idx].descripcion = e.target.value;\r\n                          setRestricciones(newRes);\r\n                        }}\r\n                        fullWidth\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                      <TextField\r\n                        label=\"Expresión\"\r\n                        value={r.expresion || ''}\r\n                        onChange={e => {\r\n                          const newRes = [...restricciones];\r\n                          newRes[idx].expresion = e.target.value;\r\n                          setRestricciones(newRes);\r\n                        }}\r\n                        fullWidth\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => setRestricciones(restricciones.filter((_, i) => i !== idx))}\r\n                      >\r\n                        🗑️\r\n                      </Button>\r\n                    </Grid>\r\n                  </React.Fragment>\r\n                ))}\r\n                <Grid item xs={12}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => setRestricciones([...restricciones, { nombre: `R${restricciones.length}`, descripcion: '', expresion: '' }])}\r\n                  >\r\n                    + Añadir restricción\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n            <Box mt={4} display=\"flex\" justifyContent=\"flex-end\">\r\n              <Button variant=\"contained\" color=\"primary\" onClick={siguiente}>Siguiente</Button>\r\n            </Box>\r\n          </Box>\r\n        )}\r\n\r\n        {/* Paso 2: Detalles del Modelo */}\r\n        {paso === 1 && (\r\n          <Box mt={4}>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n              Cargamos los datos de nuestro modelo\r\n            </Typography>\r\n            {/* Referencias de variables y restricciones */}\r\n            <Box mt={2}>\r\n              <Typography variant=\"subtitle1\">Referencias</Typography>\r\n              <Paper style={{ padding: '1rem', marginBottom: '1rem' }}>\r\n                <Typography variant=\"subtitle2\">Variables:</Typography>\r\n                {variables.map((v, idx) => (\r\n                  <Box key={idx} display=\"flex\" alignItems=\"center\" mb={1}>\r\n                    <Box\r\n                      style={{\r\n                        background: \"#e0e0e0\",\r\n                        borderRadius: \"4px\",\r\n                        padding: \"2px 8px\",\r\n                        marginRight: 8,\r\n                        fontWeight: \"bold\"\r\n                      }}\r\n                    >\r\n                      X{idx}\r\n                    </Box>\r\n                    <Typography>{v.descripcion || \"(sin descripción)\"}</Typography>\r\n                  </Box>\r\n                ))}\r\n                <Typography variant=\"subtitle2\" style={{ marginTop: 8 }}>Restricciones:</Typography>\r\n                {restricciones.map((r, idx) => (\r\n                  <Box key={idx} display=\"flex\" alignItems=\"center\" mb={1}>\r\n                    <Box\r\n                      style={{\r\n                        background: \"#e0e0e0\",\r\n                        borderRadius: \"4px\",\r\n                        padding: \"2px 8px\",\r\n                        marginRight: 8,\r\n                        fontWeight: \"bold\"\r\n                      }}\r\n                    >\r\n                      R{idx}\r\n                    </Box>\r\n                    <Typography>{r.descripcion || \"(sin descripción)\"}</Typography>\r\n                  </Box>\r\n                ))}\r\n              </Paper>\r\n            </Box>\r\n\r\n            {/* Función objetivo */}\r\n            <Box mt={2}>\r\n              <Typography variant=\"subtitle1\">Función objetivo</Typography>\r\n              <Paper style={{ padding: '1rem', marginBottom: '1rem' }}>\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n                  {variables.map((v, idx) => (\r\n                    <React.Fragment key={idx}>\r\n                      <Grid item>\r\n                        <TextField\r\n                          label={`Coef X${idx}`}\r\n                          type=\"number\"\r\n                          value={coeficientes[`x${idx}`] || \"\"}\r\n                          onChange={e => setCoeficientes(c => ({\r\n                            ...c,\r\n                            [`x${idx}`]: e.target.value\r\n                          }))}\r\n                          style={{ width: 80 }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography>{v.nombre}</Typography>\r\n                      </Grid>\r\n                      {idx < variables.length - 1 && (\r\n                        <Grid item>\r\n                          <Typography>+</Typography>\r\n                        </Grid>\r\n                      )}\r\n                    </React.Fragment>\r\n                  ))}\r\n                  <Grid item>\r\n                    <Typography>\r\n                      {objetivo === \"max\" ? \"=> MAX\" : \"=> MIN\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Paper>\r\n            </Box>\r\n\r\n            {/* Restricciones */}\r\n            <Box mt={2}>\r\n              <Typography variant=\"subtitle1\">Restricciones</Typography>\r\n              <Paper style={{ padding: '1rem', marginBottom: '1rem' }}>\r\n                {restricciones.map((r, idx) => (\r\n                  <Box key={idx} mb={2}>\r\n                    <Typography variant=\"body2\" style={{ fontWeight: \"bold\" }}>\r\n                      R{idx}: {r.descripcion || \"(sin descripción)\"}\r\n                    </Typography>\r\n                    <Grid container spacing={1} alignItems=\"center\">\r\n                      {variables.map((v, vIdx) => (\r\n                        <React.Fragment key={vIdx}>\r\n                          <Grid item>\r\n                            <TextField\r\n                              label={`Coef X${vIdx}`}\r\n                              type=\"number\"\r\n                              value={r[`x${vIdx}`] || \"\"}\r\n                              onChange={e => {\r\n                                const newRes = [...restricciones];\r\n                                newRes[idx][`x${vIdx}`] = e.target.value;\r\n                                setRestricciones(newRes);\r\n                              }}\r\n                              style={{ width: 80 }}\r\n                            />\r\n                          </Grid>\r\n                          <Grid item>\r\n                            <Typography>{v.nombre}</Typography>\r\n                          </Grid>\r\n                          {vIdx < variables.length - 1 && (\r\n                            <Grid item>\r\n                              <Typography>+</Typography>\r\n                            </Grid>\r\n                          )}\r\n                        </React.Fragment>\r\n                      ))}\r\n                      <Grid item>\r\n                        <FormControl>\r\n                          <Select\r\n                            value={r.operador || \"<=\"}\r\n                            onChange={e => {\r\n                              const newRes = [...restricciones];\r\n                              newRes[idx].operador = e.target.value;\r\n                              setRestricciones(newRes);\r\n                            }}\r\n                          >\r\n                            <MenuItem value=\"<=\">≤</MenuItem>\r\n                            <MenuItem value=\">=\">≥</MenuItem>\r\n                            <MenuItem value=\"=\">=</MenuItem>\r\n                          </Select>\r\n                        </FormControl>\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <TextField\r\n                          label=\"Valor\"\r\n                          type=\"number\"\r\n                          value={r.valor || \"\"}\r\n                          onChange={e => {\r\n                            const newRes = [...restricciones];\r\n                            newRes[idx].valor = e.target.value;\r\n                            setRestricciones(newRes);\r\n                          }}\r\n                          style={{ width: 80 }}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Box>\r\n                ))}\r\n              </Paper>\r\n            </Box>\r\n\r\n            <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\r\n              <Button variant=\"outlined\" onClick={volver}>Volver</Button>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={resolverProblema}>Siguiente</Button>\r\n            </Box>\r\n          </Box>\r\n        )}\r\n\r\n        {/* Paso 3: Resultados */}\r\n        {paso === 2 && resultado && (\r\n          <Box mt={4}>\r\n            <Typography\r\n              variant=\"h5\"\r\n              gutterBottom\r\n              align=\"center\"\r\n              style={{ background: \"#e3f2fd\", padding: \"1rem\", borderRadius: \"8px\" }}\r\n            >\r\n              El resultado óptimo de la función objetivo es: {resultado.valor_objetivo}\r\n            </Typography>\r\n\r\n            <Box mt={2} style={{ border: \"2px solid #90caf9\", borderRadius: \"8px\", padding: \"1rem\" }}>\r\n              <Typography variant=\"subtitle1\" style={{ fontWeight: \"bold\" }}>\r\n                Gráfico:\r\n              </Typography>\r\n              <Box display=\"flex\" justifyContent=\"center\">\r\n                <img\r\n                  src={`data:image/png;base64,${resultado.grafico}`}\r\n                  alt=\"Gráfico de la solución\"\r\n                  style={{ width: '400px', marginTop: '1rem', border: '1px solid #ccc' }}\r\n                />\r\n              </Box>\r\n              {/* Puedes agregar aquí un botón para ver sombra de restricciones si lo deseas */}\r\n            </Box>\r\n\r\n            <Box mt={2} style={{ border: \"2px solid #90caf9\", borderRadius: \"8px\", padding: \"1rem\" }}>\r\n              <Typography variant=\"subtitle1\" style={{ fontWeight: \"bold\" }}>\r\n                Referencias\r\n              </Typography>\r\n              <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: '1rem' }}>\r\n                <thead>\r\n                  <tr>\r\n                    <th style={{ border: '1px solid #ccc', padding: '4px' }}>Punto</th>\r\n                    <th style={{ border: '1px solid #ccc', padding: '4px' }}>Resultado</th>\r\n                    {/* Genera dinámicamente las columnas de variables */}\r\n                    {resultado.tabla_resultados && Object.keys(resultado.tabla_resultados[0])\r\n                      .filter(key => key.startsWith('x') || key.startsWith('X'))\r\n                      .map((key, idx) => (\r\n                        <th key={idx} style={{ border: '1px solid #ccc', padding: '4px' }}>{key.toUpperCase()}</th>\r\n                      ))}\r\n                    {/* Si tienes variables de holgura, agrégalas aquí */}\r\n                    {resultado.tabla_resultados && Object.keys(resultado.tabla_resultados[0])\r\n                      .filter(key => key.startsWith('s') || key.startsWith('S'))\r\n                      .map((key, idx) => (\r\n                        <th key={idx} style={{ border: '1px solid #ccc', padding: '4px' }}>{key.toUpperCase()}</th>\r\n                      ))}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {resultado.tabla_resultados?.map((p, idx) => (\r\n                    <tr key={idx} style={p.punto.includes('OPTIMO') ? { background: '#e0ffe0' } : {}}>\r\n                      <td style={{ border: '1px solid #ccc', padding: '4px' }}>{p.punto}</td>\r\n                      <td style={{ border: '1px solid #ccc', padding: '4px' }}>{p.valor_objetivo}</td>\r\n                      {/* Muestra dinámicamente los valores de las variables */}\r\n                      {Object.keys(p)\r\n                        .filter(key => key.startsWith('x') || key.startsWith('X'))\r\n                        .map((key, idx2) => (\r\n                          <td key={idx2} style={{ border: '1px solid #ccc', padding: '4px' }}>{p[key]}</td>\r\n                        ))}\r\n                      {/* Muestra dinámicamente los valores de las variables de holgura */}\r\n                      {Object.keys(p)\r\n                        .filter(key => key.startsWith('s') || key.startsWith('S'))\r\n                        .map((key, idx2) => (\r\n                          <td key={idx2} style={{ border: '1px solid #ccc', padding: '4px' }}>{p[key]}</td>\r\n                        ))}\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              <Box mt={2} display=\"flex\" justifyContent=\"flex-end\">\r\n                <Button variant=\"outlined\" onClick={volver}>Volver</Button>\r\n                <Button variant=\"contained\" color=\"primary\" style={{ marginLeft: 8 }}>\r\n                  Imprimir Resultados\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n        )}\r\n      </Paper>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App; ",{"ruleId":"16","replacedBy":"17"},{"ruleId":"18","replacedBy":"19"},{"ruleId":"20","severity":1,"message":"21","line":9,"column":3,"nodeType":"22","messageId":"23","endLine":9,"endColumn":13},{"ruleId":"20","severity":1,"message":"24","line":34,"column":9,"nodeType":"22","messageId":"23","endLine":34,"endColumn":27},"no-native-reassign",["25"],"no-negated-in-lhs",["26"],"no-unused-vars","'InputLabel' is defined but never used.","Identifier","unusedVar","'agregarRestriccion' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]